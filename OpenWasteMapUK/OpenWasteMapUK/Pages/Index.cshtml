@page
@using OpenWasteMapUK.Models
@model IndexModel
@{
    Layout = "Shared/_MapLayout";
    ViewData["Title"] = "Home page";
}

@section sidebar{
    <div class="flex-column m-3">
        <div class="form-inline mb-3">
            <div class="form-group mb-3">
                <label for="searchPostcode">Postcode:</label>
                <input type="text" autocomplete="postal-code" class="form-control" id="searchPostcode" />
            </div>
            @*<div class="form-group mb-3">
                    <label for="searchWaste">Waste:</label>
                    <input type="text" class="form-control" id="searchWaste" />
                </div>*@
            <div class="form-group mb-3">
                <label for="searchWaste">Waste:</label>
                <select class="custom-select" id="searchWaste">
                    <option></option>

                    @foreach (var opt in TagMappings.Values.Select(x => x.Key).OrderBy(x => x))
                    {
                    <option>@opt</option>
                    }
                </select>
            </div>
            <div class="form-group w-100">
                <button role="button" type="button" class="btn btn-block btn-primary" id="searchSubmit">Search</button>
            </div>
        </div>
        <div id="searchError" class="text-danger">

        </div>
        <div id="searchResults">

        </div>
    </div>
}


<div id="map"></div>

@section scripts
{
    <script src="js/tagMap.js"></script>
    <script src="/lib/moment.min.js"></script>
    <script src="/lib/opening_hours_deps.min.js"></script>

    <script>
        $(document).ready(function () {
            $('#searchWaste').select2({
                theme: 'bootstrap4',
                placeholder: "Select a waste type",
                allowClear: true
            });
        });

    </script>

    <script>
        var councilLayer;
        var HWRCLayer = new L.LayerGroup();

        var map = L.map('map').setView([55.770394, -3.339844], 6);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
            {
                attribution: '&copy; <a href=\"https://openstreetmap.org\">OpenStreetMap</a> Contributors',
                maxZoom: 18,
                minZoom: 5
            }).addTo(map);


        $("#searchSubmit").click(function () {
            const postcode = $("#searchPostcode").val();
            const waste = $("#searchWaste").val();
            const searchError = $("#searchError");
            const searchResults = $("#searchResults");
            searchError.html("");
            searchResults.html("");
            if (councilLayer != null) {
                councilLayer.remove();
            }


            $.ajax({
                url: "/api/search",
                data: {
                    postcode: postcode,
                    waste: waste
                },
                success: function (data) {
                    var resultText = `<p>Your council area is <strong>${data.councilArea}</strong></p>`;

                    if (data.wasteOSMTag == null) {
                        resultText += `<p class="text-danger">Sorry. We don't recognise this waste type at the moment. If you know any recycling centres that take this waste type. Please <a href="#">tell us here</a>.</p>`;
                    } else {
                        resultText += `<p>You can dispose of ${sanitize(waste.toLowerCase())} at the following locations:</p>`;
                    }


                    $.ajax({
                        url: "https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/Local_Authority_Districts_December_2019_Boundaries_UK_BFC/MapServer/0/query",
                        data: {
                            where: `lad19cd = '${data.councilCode}'`,
                            outSR: "4326",
                            f: "json"
                        }
                    }).done(function (councilData) {
                        var coords = L.GeoJSON.coordsToLatLngs(councilData.features[0].geometry.rings, 1);
                        councilLayer = L.polygon(coords, { color: 'green' }).addTo(map);
                        map.flyToBounds(councilLayer.getBounds(),
                            {
                                animate: true
                            });
                    });

                    resultText += '<ul class="list-group list-group-flush">';

                    HWRCLayer.eachLayer(function (layer) {
                        var icon = L.icon({
                            iconUrl: '',
                            iconSize: [25, 41],
                            iconAnchor: [12, 41],
                            popupAnchor: [1, -34],
                            shadowSize: [41, 41]
                        });
                        if (layer.properties.hasOwnProperty(data.wasteOSMTag) && layer.properties[data.wasteOSMTag] === 'yes' && layer.properties.owner.includes(data.councilArea)) {
                            icon.options.iconUrl = '/lib/leaflet/images/marker-icon-green.png';
                            resultText += `<li class="list-group-item">${layer.properties.name}</li>`;
                        } else {
                            icon.options.iconUrl = '/lib/leaflet/images/marker-icon-blue.png';
                        }
                        layer.setIcon(icon);
                    });
                    resultText += "</ul>";
                    searchResults.html(resultText);
                }
            }).fail(function (data) { searchError.html(data.responseText); });

        });

        function loadHWRCs() {
            $.ajax({
                url: "/api/GetFeatures",
                success: function (data) {
                    for (var i = 0; i < data.length; i++) {
                        if (data[i].tags != undefined) {
                            var marker;

                            if (data[i].type === "way") {
                                var nodesPoints = new Array();
                                for (var node in data[i].nodes) {
                                    nodesPoints.push(findNodeLatLng(data[i].nodes[node], data));
                                }
                                nodesPoints.pop();
                                var buildingPolygon = new L.Polygon(nodesPoints);

                                marker = L.marker(buildingPolygon.getBounds().getCenter()).addTo(map);
                            } else {
                                marker = L.marker([data[i].lat, data[i].lon]);
                            }

                            var centreProps = data[i].tags;

                            var acceptedMaterials = Object.keys(centreProps).filter(function (k) {
                                return k.indexOf('recycling:') == 0 && (centreProps[k] == "yes" || centreProps[k].toLowerCase() == "no");
                            }).reduce(function (newData, k) {
                                newData[k] = centreProps[k];
                                return newData;
                            },
                                {});


                            var idPrefix = centreProps.name.replace(/^[^a-z]+|[^\w:.-]+/gi, "");

                            var popupData;


                            // Centre title
                            popupData = "<h6>" + centreProps.name + "</h6>";

                            // Centre address
                            var addressContent = [];

                            if (centreProps["addr:housename"]) {
                                addressContent.push(centreProps["addr:housename"]);
                            }

                            if (centreProps["addr:housenumber"]) {
                                addressContent.push(centreProps["addr:housenumber"]);
                            }

                            if (centreProps["addr:street"]) {
                                addressContent.push(centreProps["addr:street"]);
                            }

                            if (centreProps["addr:city"]) {
                                addressContent.push(centreProps["addr:city"]);
                            }

                            if (centreProps["addr:postcode"]) {
                                addressContent.push(centreProps["addr:postcode"]);
                            }

                            popupData += "<em class=\"text-muted\">";
                            popupData += addressContent.join(", ")
                            popupData += "</em>";

                            if (centreProps["website"]) {
                                popupData += "<div><a href=\"" + centreProps["website"] + "\">Website</a></div>"
                            }

                            // Accordion wrapper begin
                            popupData += `<div class="accordion mb-1" id="` + idPrefix + `Accordion">`;

                            // Accepted materials section
                            popupData += `<div class="card">`
                            popupData += `<div class="card-header" id="` + idPrefix + `AcceptedMaterials">`
                            popupData += `<h2 class="mb-0"><button class="btn btn-link btn-block text-left collapsed" type="button" data-toggle="collapse" data-target="#` + idPrefix + `AcceptedMaterialsMain" aria-expanded="true">Materials</button></h2></div>`
                            popupData += `<div id="` + idPrefix + `AcceptedMaterialsMain" class="collapse" data-parent="#` + idPrefix + `Accordion"><div class="card-body">`
                            popupData += "<ul class=\"fa-ul\">"
                            for (const [key, value] of Object.entries(acceptedMaterials)) {

                                if (!tagMap.hasOwnProperty(key)) {
                                    console.warn("Missing tag for " + key);
                                } else {
                                    switch (value.toLowerCase()) {
                                        case "yes":
                                            popupData += "<li><span class=\"fa-li\"><i class=\"fas fa-check-square\" style=\"color:green\"></i></span>" + tagMap[key] + "</li>"
                                            break;
                                        case "no":
                                            popupData += "<li><span class=\"fa-li\"><i class=\"fas fa-times-square\" style=\"color:red\"></i></span>" + tagMap[key] + "</li>"
                                            break;
                                        default:
                                            console.warn("Unknown key/value pair supplied - " + key + " : " + value);
                                            break;
                                    }
                                }


                            }
                            popupData += "</ul>";
                            popupData += `</div></div></div>`;

                            // Opening hours section
                            popupData += `<div class="card">`
                            popupData += `<div class="card-header" id="` + idPrefix + `OpeningHours">`
                            popupData += `<h2 class="mb-0"><button class="btn btn-link btn-block text-left collapsed" type="button" data-toggle="collapse" data-target="#` + idPrefix + `OpeningHoursMain" aria-expanded="true">Opening hours</button></h2></div>`
                            popupData += `<div id="` + idPrefix + `OpeningHoursMain" class="collapse" data-parent="#` + idPrefix + `Accordion"><div class="card-body">`

                            if (!!(centreProps["opening_hours"])) {

                                try {
                                    var oh = new opening_hours(centreProps["opening_hours"]);
                                    popupData += "<table style=\"width:100%\" class=\"open-time-table\">"
                                    var currentDate = moment();
                                    var todayNo = currentDate.day();
                                    var weekStart = currentDate.clone().startOf('isoWeek').toDate();
                                    var weekEnd = currentDate.clone().endOf('isoWeek').toDate();
                                    var weekDays = getCurrentWeek()

                                    var openTimes = oh.getOpenIntervals(weekStart, weekEnd);

                                    for (var day in weekDays) {

                                        currentDayNo = weekDays[day].day();


                                        if (todayNo == currentDayNo) {
                                            popupData += "<tr class=\"font-weight-bold\">"
                                        } else {
                                            popupData += "<tr>"
                                        }

                                        popupData += "<td>" + weekDays[day].format('dddd') + "</td>"

                                        var dayData = findOpenTimeMatch(openTimes, weekDays[day])


                                        if (dayData.length > 0) {
                                            popupData += "<td style=\"text-align:right\">"
                                            for (var time in dayData) {
                                                popupData += dayData[time][0].format('HH:mm') + " - " + dayData[time][1].format('HH:mm');
                                                popupData += "</br>"
                                            }
                                            popupData += "</td>"
                                        } else {
                                            popupData += "<td style=\"text-align:right\">Closed</td>"
                                        }


                                        popupData += "</tr>";
                                    }
                                    popupData += "</table>"
                                } catch (ex) {

                                    console.error("EXCEPTION CAUGHT: " + centreProps["opening_hours"] + "\n" + ex)
                                }


                            } else {
                                popupData += "<em>Opening hours not supplied</em>"
                            }


                            popupData += `</div></div></div>`

                            // Accordion wrapper end
                            popupData += "</div>";


                            // TODO: Wikidata image
                            if (centreProps["image"]) {
                                popupData += "<img src=\"" + centreProps["image"] + "\" class=\"w-100\">"
                            }

                            var coords = marker.getLatLng();
                            popupData += `<button class="btn btn-sm text-white btn-primary suggest-changes-btn" data-toggle="modal" data-target="#suggestChangeModal" data-hwrc="${centreProps.name}" data-lat="${coords.lat}" data-lng="${coords.lng}" onclick="setSuggestedChanges(this)">Suggest a change</button>`;


                            marker.bindPopup(popupData, { maxWidth: 300, minWidth: 200 });
                            marker.properties = centreProps;
                            marker.addTo(HWRCLayer);
                        }
                    }
                    HWRCLayer.addTo(map);
                }
            }).fail(function (data) { console.error(data); });
        }


        loadHWRCs();

        function setSuggestedChanges(e) {
            $("#suggestChangeModalLabel").text(`Suggest a change for ${e.dataset.hwrc}`);
            $("#suggestHWRC").val(e.dataset.hwrc);
            $("#suggestLat").val(e.dataset.lat);
            $("#suggestLng").val(e.dataset.lng);
        }

        function submitChanges() {
            var hwrcName = $("#suggestHWRC").val();
            var hwrcText = $("#suggestedChangeText").val();
            var lat = $("#suggestLat").val();
            var lng = $("#suggestLng").val();
            $.ajax({
                    url: "/api/SuggestChange",
                    data: {
                        hwrcName,
                        hwrcText,
                        lat,
                        lng
                    }
                }
            );
        }


        function findNodeLatLng(nodeName, nodes) {
            for (var node in nodes) {
                if (nodes[node].id == nodeName) {
                    return [nodes[node].lat, nodes[node].lon];
                }
            }
        }

        function getCurrentWeek() {
            var currentDate = moment();

            var weekStart = currentDate.clone().startOf('isoWeek');
            var weekEnd = currentDate.clone().endOf('isoWeek');

            var days = [];

            for (var i = 0; i <= 6; i++) {
                days.push(moment(weekStart).add(i, 'days'));
            }

            return days;
        }


        function findOpenTimeMatch(openTimes, date) {
            var openingData = [];
            for (var i in openTimes) {
                var startTime = new moment(openTimes[i][0])
                var endTime = new moment(openTimes[i][1])
                if (date.startOf('day').isSame(startTime.startOf('day'))) {
                    openingData.push([new moment(openTimes[i][0]), endTime])
                }
            }
            return openingData;
        }


        function sanitize(string) {
            const map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#x27;',
                "/": '&#x2F;',
                "`": '&grave;'
            };
            const reg = /[&<>"'/]/ig;
            return string.replace(reg, (match) => (map[match]));
        }
    </script>
    <div class="modal fade" id="suggestChangeModal" tabindex="-1" role="dialog" aria-labelledby="suggestChangeModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="suggestChangeModalLabel">Suggest a change</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <label for="suggestedChangeText">Write your suggested change below:</label>
                    <textarea class="form-control" id="suggestedChangeText" name="suggestedChangeText"></textarea>
                    <input type="hidden" id="suggestHWRC" name="suggestHWRC" />
                    <input type="hidden" id="suggestLat" name="suggestLat" />
                    <input type="hidden" id="suggestLng" name="suggestLng" />
                </div>
                <div class="modal-footer">
                    <button type="button" id="submitChanges" onclick="submitChanges()" data-dismiss="modal" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </div>
    </div>

}
